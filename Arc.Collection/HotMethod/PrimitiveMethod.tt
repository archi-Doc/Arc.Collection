<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var allTypes = new (string Simple, string Name)[]
{
    ("byte", "UInt8"),
    ("sbyte", "Int8"),
    ("ushort", "UInt16"),
    ("short", "Int16"),
    ("uint", "UInt32"),
    ("int", "Int32"),
    ("ulong", "UInt64"),
    ("long", "Int64"),
    ("float", "Single"),
    ("double", "Double"),
    ("DateTime", "DateTime"),
};
#>
// Copyright (c) All contributors. All rights reserved. Licensed under the MIT license.

/* THIS (.cs) FILE IS GENERATED. DO NOT CHANGE IT.
 * CHANGE THE .tt FILE INSTEAD. */

using System;

#pragma warning disable SA1649 // File name should match first type name

namespace Arc.Collection.HotMethod
{<# foreach(var t in allTypes) {  #>

    public sealed class <#= t.Name #>Method : IHotMethod<<#= t.Simple #>>
    {
        public static readonly <#= t.Name #>Method Instance = new ();

        private <#= t.Name #>Method()
        {
        }

        public int BinarySearch(<#= t.Simple #>[] array, int index, int length, <#= t.Simple #> value)
        {
            var min = index;
            var max = length - 1;
            while (min <= max)
            {
                var mid = min + ((max - min) / 2);
                if (value < array[mid])
                {
                    max = mid - 1;
                    continue;
                }
                else if (value > array[mid])
                {
                    min = mid + 1;
                    continue;
                }
                else
                {// Found
                    return mid;
                }
            }

            return ~min;
        }

        public (int cmp, OrderedSet<<#= t.Simple #>>.Node? leaf) SearchNode(OrderedSet<<#= t.Simple #>>.Node? target, <#= t.Simple #> value)
        {
            var x = target;
            var p = target;
            int cmp = 0;

            while (x != null)
            {
                p = x;
                if (value < x.Value)
                {
                    x = x.Left;
                    cmp = -1;
                }
                else if (value > x.Value)
                {
                    x = x.Right;
                    cmp = 1;
                }
                else
                {// Found
                    return (0, x);
                }
            }

            return (cmp, p);
        }

        public (int cmp, OrderedMap<<#= t.Simple #>>.Node? leaf) SearchNode(OrderedMap<<#= t.Simple #>>.Node? target, <#= t.Simple #> value)
        {
            var x = target;
            var p = target;
            int cmp = 0;

            while (x != null)
            {
                p = x;
                if (value < x.Value)
                {
                    x = x.Left;
                    cmp = -1;
                }
                else if (value > x.Value)
                {
                    x = x.Right;
                    cmp = 1;
                }
                else
                {// Found
                    return (0, x);
                }
            }

            return (cmp, p);
        }
    }
<# } #>
}
